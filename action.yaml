name: 'Catalina tester'
description: 'Creates tmp DB, run migration files against DB and then drop it'
inputs:
  db-image-name:
    description: 'Database docker image'
    required: true
    default: 'mysql'
  db-image-tag:
    description: 'Database docker image tag'
    required: true
    default: 'latest'
  rdbms:
    description: 'Relational database management system'
    required: true
    default: 'mysql'
runs:
  using: 'composite'
  steps:
    - name: 'Set Github Path'
      run: echo "$GITHUB_ACTION_PATH" >> $GITHUB_PATH
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}

    - name: 'Copy migration files from workflow to the knex folder'
      run: copy_migration_files.sh
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}

    - name: 'Prepare global variables based on inputs and other defaults'
      run: |
        if [ "$RDBMS" = 'mysql' ]; then
          echo "DB_CLIENT=mysql2" >> $GITHUB_ENV
          echo "DB_LIBRARY=mysql2" >> $GITHUB_ENV
          echo "DB_HOST_PORT=3306" >> $GITHUB_ENV
          echo "DB_INTERNAL_PORT=3306" >> $GITHUB_ENV
          echo "DB_USER=root" >> $GITHUB_ENV
        elif [ "$RDBMS" = 'mssql' ]; then
          echo "DB_CLIENT=mssql" >> $GITHUB_ENV
          echo "DB_LIBRARY=tedious" >> $GITHUB_ENV
          echo "DB_HOST_PORT=1433" >> $GITHUB_ENV
          echo "DB_INTERNAL_PORT=1433" >> $GITHUB_ENV
          echo "DB_USER=sa" >> $GITHUB_ENV
        elif [ "$RDBMS" = 'postgres' ]; then
          echo "DB_CLIENT=pg" >> $GITHUB_ENV
          echo "DB_LIBRARY=pg" >> $GITHUB_ENV
          echo "DB_HOST_PORT=5432" >> $GITHUB_ENV
          echo "DB_INTERNAL_PORT=5432" >> $GITHUB_ENV
          echo "DB_USER=postgres" >> $GITHUB_ENV
        else 
          echo "A valid RDBMS is required to install the db library."
          exit 1
        fi

        # Fixed defaults
        echo "DB_NAME=catalina" >> $GITHUB_ENV
        echo "DB_HOST=db-host" >> $GITHUB_ENV
        echo "DB_NETWORK=db-network" >> $GITHUB_ENV
        echo "DB_PASSWORD=yourStrong(!)Password" >> $GITHUB_ENV
        echo "DB_EXECUTION_TYPE=migrate" >> $GITHUB_ENV
      shell: bash
      env:
        RDBMS: ${{ inputs.rdbms }}

    - name: 'Prepare .env file for the migrations executing container'
      shell: 'bash'
      run: |
        echo "DB_CLIENT=$DB_CLIENT" >> .env
        echo "DB_HOST=$DB_HOST" >> .env
        echo "DB_HOST_PORT=$DB_HOST_PORT" >> .env
        echo "DB_NAME=$DB_NAME" >> .env
        echo "DB_USER=$DB_USER" >> .env
        echo "DB_PASSWORD=$DB_PASSWORD" >> .env
        echo "DB_EXECUTION_TYPE=$DB_EXECUTION_TYPE" >> .env
      env:
        DB_CLIENT: ${{ env.DB_CLIENT }}
        DB_HOST: ${{ env.DB_HOST }}
        DB_HOST_PORT: ${{ env.DB_HOST_PORT }}
        DB_NAME: ${{ env.DB_NAME }}
        DB_USER: ${{ env.DB_USER }}
        DB_PASSWORD: ${{ env.DB_PASSWORD }}
        DB_EXECUTION_TYPE: ${{ env.DB_EXECUTION_TYPE }}

    - name: 'Create Database network'
      shell: 'bash'
      run: |
        docker network create "$DB_NETWORK"
      env:
        DB_NETWORK: ${{ env.DB_NETWORK }}

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build custom database image
      uses: docker/build-push-action@v2
      with:
        build-args: |
          IMAGE_NAME=${{ inputs.db-image-name }}
          IMAGE_TAG=${{ inputs.db-image-tag }}
        context: ./custom-dbs/${{ inputs.rdbms }}
        load: true
        push: false
        tags: custom-db:v1

    - name: 'Run Database Server'
      run: run_db.sh
      shell: 'bash'
      env:
        RDBMS: ${{ inputs.rdbms }}
        DB_IMAGE_NAME: custom-db
        DB_IMAGE_TAG: v1
        DB_HOST: ${{ env.DB_HOST }}
        DB_NAME: ${{ env.DB_NAME }}
        DB_NETWORK: ${{ env.DB_NETWORK }}
        DB_PASSWORD: ${{ env.DB_PASSWORD }}
        DB_HOST_PORT: ${{ env.DB_HOST_PORT }}
        DB_INTERNAL_PORT: ${{ env.DB_INTERNAL_PORT }}

    - name: 'Verify database service readiness'
      id: verify_db_service_readiness
      shell: 'bash'
      run: verify_db_service_readiness.sh
      env:
        ATTEMPTS_COUNTER: 0
        ATTEMPTS_LIMIT: 10
        DB_HOST: ${{ env.DB_HOST }}
        DB_INTERNAL_PORT: ${{ env.DB_INTERNAL_PORT }}
        DB_NETWORK: ${{ env.DB_NETWORK }}

    - name: Build knex image
      uses: docker/build-push-action@v6
      with:
        build-args: |
          DB_LIBRARY=${{ env.DB_LIBRARY }}
        context: ./knex
        load: true
        push: false
        tags: custom-knex:v1

    - name: 'Run migrations'
      run: run_migrations.sh
      shell: 'bash'
      env:
        DB_NETWORK: ${{ env.DB_NETWORK }}
        KNEX_IMAGE_NAME: custom-knex
        KNEX_IMAGE_TAG: v1
        KNEX_CONTAINER_NAME: 'migration-runner'
      if: ${{ success() }}

    #  Continue
    #- name: 'Run rollback to the previous migration batch'  

    - name: 'Clean up'
      run: clean_up.sh
      shell: 'bash'
      env:
        DB_HOST: ${{ env.DB_HOST }}
        DB_NETWORK: ${{ env.DB_NETWORK }}
      if: ${{ always() }}