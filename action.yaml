name: 'Catalina tester'
description: 'Creates tmp DB, run migration files against DB and then drop it'
inputs:
  db-image-name:
    description: 'Database docker image'
    required: true
    default: 'mysql'
  db-image-tag:
    description: 'Database docker image tag'
    required: true
    default: 'latest'
  db-user:
    description: 'Database user'
    required: true
    default: 'root'
  db-password:
    description: 'Database password'
    required: true
    default: '123456'
  db-host-port:
    description: 'Database host port'
    required: true
    default: '3306'
  db-internal-port:
    description: 'Database internal port'
    required: true
    default: '3306'
  knex-image-name:
    description: 'Knex docker image'
    required: true
    default: 'knex'
  knex-image-tag:
    description: 'Knex docker image tag'
    required: true
    default: 'latest'
  rdbms:
    description: 'Relational database management system'
    required: true
    default: 'mysql'
runs:
  using: 'composite'
  steps:
    - name: 'Copy migration files from workflow to the knex folder'
      run: |
        echo "Value of the GITHUB_WORKSPACE variable inside the action"
        echo $GITHUB_WORKSPACE
        exit 1        
      shell: bash

    - name: 'Set Github Path'
      run: echo "$GITHUB_ACTION_PATH" >> $GITHUB_PATH
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}

    - name: 'Prepare global variables based on inputs and other defaults'
      run: |
        if [ "$RDBMS" = 'mysql' ]; then
          echo "DB_CLIENT=mysql2" >> $GITHUB_ENV
        fi

        # Fixed defaults
        echo "DB_NAME=tmp-db" >> $GITHUB_ENV
        echo "DB_HOST=db-host" >> $GITHUB_ENV
        echo "DB_NETWORK=db-network" >> $GITHUB_ENV

      shell: bash
      env:
        RDBMS: ${{ inputs.rdbms }}

    - name: 'Create Database network'
      shell: 'bash'
      run: |
        docker network create "$DB_NETWORK"
      env:
        DB_NETWORK: ${{ env.DB_NETWORK }}

    - name: 'Run Database Server'
      run: run_db.sh
      shell: 'bash'
      env:
        RDBMS: ${{ inputs.rdbms }}
        DB_IMAGE_NAME: ${{ inputs.db-image-name }}
        DB_IMAGE_TAG: ${{ inputs.db-image-tag }}
        DB_HOST: ${{ env.DB_HOST }}
        DB_NAME: ${{ env.DB_NAME }}
        DB_NETWORK: ${{ env.DB_NETWORK }}
        DB_PASSWORD: ${{ inputs.db-password }}
        DB_HOST_PORT: ${{ inputs.db-host-port }}
        DB_INTERNAL_PORT: ${{ inputs.db-internal-port }}

    - name: 'Build knex'
      run: build_knex.sh
      shell: 'bash'
      env:
        DB_CLIENT: ${{ env.DB_CLIENT }}
        KNEX_IMAGE_NAME: ${{ inputs.knex-image-name }}
        KNEX_IMAGE_TAG: ${{ inputs.knex-image-tag }}

    - name: 'Prepare .env file'
      shell: 'bash'
      run: |
        echo "DB_CLIENT=$DB_CLIENT" >> .env
        echo "DB_HOST=$DB_HOST" >> .env
        echo "DB_HOST_PORT=${{ inputs.db-host-port }}" >> .env
        echo "DB_NAME=$DB_NAME" >> .env
        echo "DB_PASSWORD=${{ inputs.db-password }}" >> .env
        echo "DB_USER=${{ inputs.db-user }}" >> .env
      env:
        DB_CLIENT: ${{ env.DB_CLIENT }}
        DB_HOST: ${{ env.DB_HOST }}
        DB_NAME: ${{ env.DB_NAME }}

    - name: 'Verify database service readiness'
      id: verify_db_service_readiness
      shell: 'bash'
      run: verify_db_service_readiness.sh
      env:
        ATTEMPTS_COUNTER: 0
        ATTEMPTS_LIMIT: 10
        DB_HOST: ${{ env.DB_HOST }}
        DB_INTERNAL_PORT: ${{ inputs.db-internal-port }}
        DB_NETWORK: ${{ env.DB_NETWORK }}

    - name: 'Run migrations'
      run: run_migrations.sh
      shell: 'bash'
      env:
        DB_NETWORK: ${{ env.DB_NETWORK }}
        KNEX_IMAGE_NAME: ${{ inputs.knex-image-name }}
        KNEX_IMAGE_TAG: ${{ inputs.knex-image-tag }}
        KNEX_CONTAINER_NAME: 'migration-runner'
      if: ${{ success() }}

    - name: 'Clean up'
      run: clean_up.sh
      shell: 'bash'
      env:
        DB_HOST: ${{ env.DB_HOST }}
        DB_NETWORK: ${{ env.DB_NETWORK }}
      if: ${{ always() }}